
package network_project;

import java.io.File;
import java.io.IOException;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.InetAddress;
import java.util.Scanner;

public class RootServer {
     	public static void main(String args[]) 
	{
		try {
			
			DatagramSocket RootServerSocket = new DatagramSocket(2222);//port of root
			DatagramSocket TLDServerSocket = new DatagramSocket();
			System.out.println("server is booted up and waiting for client to send request");
			
			// thread code
			Thread server = new serverConnection (RootServerSocket,TLDServerSocket);
			server.start();
			// serverSocket.close();
		   }
		catch(Exception e)
                {
		    System.out.println("Problem with server socket");
		}
	}
	static class serverConnection extends Thread
	{
		DatagramSocket rootserverudp;
		DatagramSocket TLDserverudp;
		
		//serverConnection is a constuctor
		serverConnection(DatagramSocket server,DatagramSocket server1)
		{
		 rootserverudp=server;
		 TLDserverudp=server1;
		}
		
		public void run() 
		{
			try {
				//create array of bytes to receive client request and send server's response
				byte[ ] requestOflocalByte = new byte[4096];
				byte[ ] responseOfRootByte = new byte[4096];
                                
				byte[ ] requestOfRootByte = new byte[4096];
				byte[ ] responseOfTLDByte = new byte[4096];
				
				Scanner scanner = new Scanner(System.in);
				boolean b=false;
				while (true) {
					System.out.println("server is ready to communicate with client");
					String dataOFfile= new String();
					
					//create client packet for receiving client's request
					DatagramPacket clientPacket = new DatagramPacket(requestOflocalByte,requestOflocalByte.length);
					// receive client request from the client packet
					rootserverudp.receive(clientPacket);
					
					//convert data byte to string
					String requestOfClient = new String(clientPacket.getData());
					requestOfRootByte=requestOfClient.getBytes();
					
					File myObj = new File("E:/root_dns_table.txt");
					Scanner myReader = new Scanner(myObj);
					while(myReader.hasNextLine())
                                        {
						
                                            String data = myReader.nextLine();
                                            String[]  array= data.split(" "); 
                                            String firstElement=array[0];

                                            int comp = firstElement.compareTo(requestOfClient.trim());
                                            if(comp==0)
                                            {
                                               dataOFfile =data;
                                               b=true;
                                               break;
                                            }
						
					}
					myReader.close();
			       if(b==true)
			       {
					String []array= dataOFfile.split(" ");
					String []newarray= new String [20];
					for (int i=0;i<array.length;i++)
					{
						if (i==0) 
						{
                                                  newarray[i]="URL:"+array[i]+" ";
						}
						else if (i==1) 
						{
						  newarray[i]="IP:"+array[i]+" ";
						}
						else if (i==2) 
						{
						  newarray[i]="canonical name:"+array[i]+"    "+"Aliases:"+array[0]+" ";
						}		//0
					}
					for (int i=(array.length)+1;i>=array.length;i--)
					{
					  if(i==(array.length))
					   {
				        	 newarray[i]="Server name : root DNS ";
					   }
					else if(i==(array.length)+1)
					   {
					     if(array.length==3)
						{
						    newarray[i]="Query type: A,CNAME ";
						}
					     else
						{
						   newarray[i]="Query type: A ";
						}
					    }
						
					}
					String input=new String();
					for(int i=0;i<=array.length+1;i++)
					{
					   input += newarray[i];
					}
					//convert input from string to array byte
					responseOfRootByte = input.getBytes();
					
					InetAddress clientIP = clientPacket.getAddress();
					int clientport = clientPacket.getPort();
					
					//create server packet for sending server response to client
					DatagramPacket serverPacket = new DatagramPacket(responseOfRootByte,responseOfRootByte.length,clientIP,clientport);
					//send server's response to client
					rootserverudp.send(serverPacket);
			       }
			        else
			          {
			    	   
			    	   InetAddress ServerIP = InetAddress.getByName("localhost");
			    	   
			    	   DatagramPacket localPacket = new DatagramPacket(requestOfRootByte,requestOfRootByte.length,ServerIP,3333);//PORT TLD SERVER
			    	   TLDserverudp.send(localPacket);
			    	   
			    	   DatagramPacket TLDpacket = new DatagramPacket(responseOfTLDByte,responseOfTLDByte.length);
			    	   TLDserverudp.receive(TLDpacket);
                                   
			    	   String response = new String(TLDpacket.getData());
			    	   
			    	   InetAddress clientIP = clientPacket.getAddress();
				   int clientport = clientPacket.getPort();		
				   responseOfRootByte=response.getBytes();
				   DatagramPacket serverPacket = new DatagramPacket(responseOfRootByte,responseOfRootByte.length,clientIP,clientport);
				    TLDserverudp.send(serverPacket);
			          }
				    //clear buffer after every msg
				    requestOflocalByte = new byte[4096];
				    responseOfRootByte = null;
				    requestOfRootByte = null;
				    responseOfTLDByte = new byte[4096];
				    rootserverudp.close();
				    scanner.close();
				    TLDserverudp.close();
				    
	   }	
			}
			catch (IOException e)
			{ 
			 System.out.println("connection with this client("+rootserverudp+") is closed");
			}
		
			}
	   }
    
	
    
}
